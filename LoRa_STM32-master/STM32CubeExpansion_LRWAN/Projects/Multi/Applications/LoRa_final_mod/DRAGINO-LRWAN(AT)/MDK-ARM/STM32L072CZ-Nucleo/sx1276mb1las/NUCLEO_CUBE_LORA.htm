<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\sx1276mb1las\NUCLEO_CUBE_LORA.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\sx1276mb1las\NUCLEO_CUBE_LORA.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6210000: Last Updated: Sun Sep 15 01:24:02 2024
<BR><P>
<H3>Maximum Stack Usage =        848 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; LORA_Init &rArr; LORA_Join &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[115]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[115]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[2b]">CMD_GetChar</a> from command.o(.text.CMD_GetChar) referenced from command.o(.text.CMD_Init)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from stm32l0xx_it.o(.text.DMA1_Channel4_5_6_7_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI0_1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI2_3_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from stm32l0xx_it.o(.text.EXTI4_15_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[c7]">HW_GetBatteryLevel</a> from stm32l0xx_hw.o(.text.HW_GetBatteryLevel) referenced from main.o(.data..L_MergedGlobals)
 <LI><a href="#[ca]">HW_GetRandomSeed</a> from stm32l0xx_hw.o(.text.HW_GetRandomSeed) referenced from main.o(.data..L_MergedGlobals)
 <LI><a href="#[c8]">HW_GetTemperatureLevel</a> from stm32l0xx_hw.o(.text.HW_GetTemperatureLevel) referenced from main.o(.data..L_MergedGlobals)
 <LI><a href="#[c9]">HW_GetUniqueId</a> from stm32l0xx_hw.o(.text.HW_GetUniqueId) referenced from main.o(.data..L_MergedGlobals)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32l0xx_it.o(.text.HardFault_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1a]">I2C3_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[cd]">LORA_ConfirmClass</a> from main.o(.text.LORA_ConfirmClass) referenced from main.o(.data..L_MergedGlobals)
 <LI><a href="#[cc]">LORA_HasJoined</a> from main.o(.text.LORA_HasJoined) referenced from main.o(.data..L_MergedGlobals)
 <LI><a href="#[cb]">LORA_RxData</a> from main.o(.text.LORA_RxData) referenced from main.o(.data..L_MergedGlobals)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[33]">McpsConfirm</a> from lora.o(.text.McpsConfirm) referenced from lora.o(.text.LORA_Init)
 <LI><a href="#[32]">McpsIndication</a> from lora.o(.text.McpsIndication) referenced from lora.o(.text.LORA_Init)
 <LI><a href="#[31]">MlmeConfirm</a> from lora.o(.text.MlmeConfirm) referenced from lora.o(.text.LORA_Init)
 <LI><a href="#[1]">NMI_Handler</a> from stm32l0xx_it.o(.text.NMI_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[39]">OnAckTimeoutTimerEvent</a> from loramac.o(.text.OnAckTimeoutTimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[43]">OnCertifTxNextPacketTimerEvent</a> from lora-test.o(.text.OnCertifTxNextPacketTimerEvent) referenced from lora-test.o(.text.certif_rx)
 <LI><a href="#[40]">OnDownlinkDetectTimeoutEvent</a> from main.o(.text.OnDownlinkDetectTimeoutEvent) referenced from main.o(.text.OnTxTimerEvent2)
 <LI><a href="#[44]">OnIWDGRefreshTimeoutEvent</a> from main.o(.text.OnIWDGRefreshTimeoutEvent) referenced from main.o(.text.main)
 <LI><a href="#[35]">OnMacStateCheckTimerEvent</a> from loramac.o(.text.OnMacStateCheckTimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[45]">OnNetworkJoinedLedEvent</a> from main.o(.text.OnNetworkJoinedLedEvent) referenced from main.o(.text.main)
 <LI><a href="#[3b]">OnRadioRxDone</a> from loramac.o(.text.OnRadioRxDone) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[3a]">OnRadioRxError</a> from loramac.o(.text.OnRadioRxError) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[3d]">OnRadioRxTimeout</a> from loramac.o(.text.OnRadioRxTimeout) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[3c]">OnRadioTxDone</a> from loramac.o(.text.OnRadioTxDone) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[3e]">OnRadioTxTimeout</a> from loramac.o(.text.OnRadioTxTimeout) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[46]">OnReJoinTimerEvent</a> from main.o(.text.OnReJoinTimerEvent) referenced from main.o(.text.main)
 <LI><a href="#[37]">OnRxWindow1TimerEvent</a> from loramac.o(.text.OnRxWindow1TimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[38]">OnRxWindow2TimerEvent</a> from loramac.o(.text.OnRxWindow2TimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[36]">OnTxDelayedTimerEvent</a> from loramac.o(.text.OnTxDelayedTimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[34]">OnTxTimerEvent</a> from main.o(.text.OnTxTimerEvent) referenced from main.o(.text.LORA_RxData)
 <LI><a href="#[34]">OnTxTimerEvent</a> from main.o(.text.OnTxTimerEvent) referenced from main.o(.text.OnTxTimerEvent2)
 <LI><a href="#[30]">OnTxTimerEvent2</a> from main.o(.text.OnTxTimerEvent2) referenced from main.o(.text.LORA_HasJoined)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32l0xx_it.o(.text.PendSV_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[22]">RNG_LPUART1_IRQHandler</a> from stm32l0xx_it.o(.text.RNG_LPUART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from stm32l0xx_it.o(.text.RTC_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32l0xx_it.o(.text.SVC_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[b7]">SX1276CheckRfFrequency</a> from sx1276mb1las.o(.text.SX1276CheckRfFrequency) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[c6]">SX1276GetRadioWakeUpTime</a> from sx1276.o(.text.SX1276GetRadioWakeUpTime) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[b0]">SX1276GetStatus</a> from sx1276.o(.text.SX1276GetStatus) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[b8]">SX1276GetTimeOnAir</a> from sx1276.o(.text.SX1276GetTimeOnAir) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[cf]">SX1276GetWakeTime</a> from sx1276mb1las.o(.text.SX1276GetWakeTime) referenced from sx1276mb1las.o(.data.BoardCallbacks)
 <LI><a href="#[af]">SX1276Init</a> from sx1276.o(.text.SX1276Init) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[ae]">SX1276IoDeInit</a> from sx1276mb1las.o(.text.SX1276IoDeInit) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[ad]">SX1276IoInit</a> from sx1276mb1las.o(.text.SX1276IoInit) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[d0]">SX1276IoIrqInit</a> from sx1276mb1las.o(.text.SX1276IoIrqInit) referenced from sx1276mb1las.o(.data.BoardCallbacks)
 <LI><a href="#[b3]">SX1276IsChannelFree</a> from sx1276.o(.text.SX1276IsChannelFree) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[d4]">SX1276OnDio0Irq</a> from sx1276.o(.text.SX1276OnDio0Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[d5]">SX1276OnDio1Irq</a> from sx1276.o(.text.SX1276OnDio1Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[d6]">SX1276OnDio2Irq</a> from sx1276.o(.text.SX1276OnDio2Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[d7]">SX1276OnDio3Irq</a> from sx1276.o(.text.SX1276OnDio3Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[d8]">SX1276OnDio4Irq</a> from sx1276.o(.text.SX1276OnDio4Irq) referenced from sx1276.o(.data.DioIrq)
 <LI><a href="#[41]">SX1276OnTimeoutIrq</a> from sx1276.o(.text.SX1276OnTimeoutIrq) referenced from sx1276.o(.text.SX1276Init)
 <LI><a href="#[b4]">SX1276Random</a> from sx1276.o(.text.SX1276Random) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[c1]">SX1276Read</a> from sx1276.o(.text.SX1276Read) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[c3]">SX1276ReadBuffer</a> from sx1276.o(.text.SX1276ReadBuffer) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[bf]">SX1276ReadRssi</a> from sx1276.o(.text.SX1276ReadRssi) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[b9]">SX1276Send</a> from sx1276.o(.text.SX1276Send) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[d3]">SX1276SetAntSw</a> from sx1276mb1las.o(.text.SX1276SetAntSw) referenced from sx1276mb1las.o(.data.BoardCallbacks)
 <LI><a href="#[d2]">SX1276SetAntSwLowPower</a> from sx1276mb1las.o(.text.SX1276SetAntSwLowPower) referenced from sx1276mb1las.o(.data.BoardCallbacks)
 <LI><a href="#[b2]">SX1276SetChannel</a> from sx1276.o(.text.SX1276SetChannel) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[c4]">SX1276SetMaxPayloadLength</a> from sx1276.o(.text.SX1276SetMaxPayloadLength) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[b1]">SX1276SetModem</a> from sx1276.o(.text.SX1276SetModem) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[c5]">SX1276SetPublicNetwork</a> from sx1276.o(.text.SX1276SetPublicNetwork) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[d1]">SX1276SetRfTxPower</a> from sx1276mb1las.o(.text.SX1276SetRfTxPower) referenced from sx1276mb1las.o(.data.BoardCallbacks)
 <LI><a href="#[bc]">SX1276SetRx</a> from sx1276.o(.text.SX1276SetRx) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[b5]">SX1276SetRxConfig</a> from sx1276.o(.text.SX1276SetRxConfig) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[ba]">SX1276SetSleep</a> from sx1276.o(.text.SX1276SetSleep) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[bb]">SX1276SetStby</a> from sx1276.o(.text.SX1276SetStby) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[b6]">SX1276SetTxConfig</a> from sx1276.o(.text.SX1276SetTxConfig) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[be]">SX1276SetTxContinuousWave</a> from sx1276.o(.text.SX1276SetTxContinuousWave) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[ce]">SX1276SetXO</a> from sx1276mb1las.o(.text.SX1276SetXO) referenced from sx1276mb1las.o(.data.BoardCallbacks)
 <LI><a href="#[bd]">SX1276StartCad</a> from sx1276.o(.text.SX1276StartCad) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[c0]">SX1276Write</a> from sx1276.o(.text.SX1276Write) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[c2]">SX1276WriteBuffer</a> from sx1276.o(.text.SX1276WriteBuffer) referenced from sx1276mb1las.o(.rodata.Radio)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32l0xx_it.o(.text.SysTick_Handler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[25]">SystemInit</a> from system_stm32l0xx.o(.text.SystemInit) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[19]">TIM21_IRQHandler</a> from stm32l0xx_it.o(.text.TIM21_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[1b]">TIM22_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from stm32l0xx_it.o(.text.TIM3_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[42]">Trace_TxCpltCallback</a> from trace.o(.text.Trace_TxCpltCallback) referenced from trace.o(.text.TraceInit)
 <LI><a href="#[2c]">UART_DMAAbortOnError</a> from stm32l0xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2d]">UART_DMAError</a> from stm32l0xx_hal_uart.o(.text.UART_DMAError) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[2f]">UART_DMATransmitCplt</a> from stm32l0xx_hal_uart.o(.text.UART_DMATransmitCplt) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[2e]">UART_DMATxHalfCplt</a> from stm32l0xx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced from stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[20]">USART1_IRQHandler</a> from stm32l0xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[14]">USART4_5_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[23]">USB_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[3f]">UnconfirmedUplinkChangeToConfirmedUplinkTimeoutEvent</a> from main.o(.text.UnconfirmedUplinkChangeToConfirmedUplinkTimeoutEvent) referenced from main.o(.text.OnTxTimerEvent2)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l072xx.o(.text) referenced from startup_stm32l072xx.o(RESET)
 <LI><a href="#[26]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l072xx.o(.text)
 <LI><a href="#[28]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[29]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[27]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[48]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[9d]">at_5Vtime_get</a> from at.o(.text.at_5Vtime_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[9e]">at_5Vtime_set</a> from at.o(.text.at_5Vtime_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[58]">at_ADR_get</a> from at.o(.text.at_ADR_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[59]">at_ADR_set</a> from at.o(.text.at_ADR_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[4e]">at_AppEUI_get</a> from at.o(.text.at_AppEUI_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[4f]">at_AppEUI_set</a> from at.o(.text.at_AppEUI_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[50]">at_AppKey_get</a> from at.o(.text.at_AppKey_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[51]">at_AppKey_set</a> from at.o(.text.at_AppKey_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[56]">at_AppSKey_get</a> from at.o(.text.at_AppSKey_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[57]">at_AppSKey_set</a> from at.o(.text.at_AppSKey_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[ac]">at_CFG_run</a> from at.o(.text.at_CFG_run) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a0]">at_CHS_get</a> from at.o(.text.at_CHS_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a1]">at_CHS_set</a> from at.o(.text.at_CHS_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[49]">at_DEBUG_run</a> from at.o(.text.at_DEBUG_run) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[5c]">at_DataRate_get</a> from at.o(.text.at_DataRate_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[5d]">at_DataRate_set</a> from at.o(.text.at_DataRate_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[52]">at_DevAddr_get</a> from at.o(.text.at_DevAddr_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[53]">at_DevAddr_set</a> from at.o(.text.at_DevAddr_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[4c]">at_DevEUI_get</a> from at.o(.text.at_DevEUI_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[4d]">at_DevEUI_set</a> from at.o(.text.at_DevEUI_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[76]">at_DeviceClass_get</a> from at.o(.text.at_DeviceClass_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[77]">at_DeviceClass_set</a> from at.o(.text.at_DeviceClass_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[74]">at_DownlinkCounter_get</a> from at.o(.text.at_DownlinkCounter_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[75]">at_DownlinkCounter_set</a> from at.o(.text.at_DownlinkCounter_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[5e]">at_DutyCycle_get</a> from at.o(.text.at_DutyCycle_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[5f]">at_DutyCycle_set</a> from at.o(.text.at_DutyCycle_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[4b]">at_FDR</a> from at.o(.text.at_FDR) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[94]">at_INTMOD1_get</a> from at.o(.text.at_INTMOD1_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[95]">at_INTMOD1_set</a> from at.o(.text.at_INTMOD1_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[96]">at_INTMOD2_get</a> from at.o(.text.at_INTMOD2_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[97]">at_INTMOD2_set</a> from at.o(.text.at_INTMOD2_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[98]">at_INTMOD3_get</a> from at.o(.text.at_INTMOD3_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[99]">at_INTMOD3_set</a> from at.o(.text.at_INTMOD3_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[78]">at_Join</a> from at.o(.text.at_Join) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[6a]">at_JoinAcceptDelay1_get</a> from at.o(.text.at_JoinAcceptDelay1_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[6b]">at_JoinAcceptDelay1_set</a> from at.o(.text.at_JoinAcceptDelay1_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[6c]">at_JoinAcceptDelay2_get</a> from at.o(.text.at_JoinAcceptDelay2_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[6d]">at_JoinAcceptDelay2_set</a> from at.o(.text.at_JoinAcceptDelay2_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[92]">at_MOD_get</a> from at.o(.text.at_MOD_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[93]">at_MOD_set</a> from at.o(.text.at_MOD_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[70]">at_NetworkID_get</a> from at.o(.text.at_NetworkID_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[71]">at_NetworkID_set</a> from at.o(.text.at_NetworkID_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[6e]">at_NetworkJoinMode_get</a> from at.o(.text.at_NetworkJoinMode_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[6f]">at_NetworkJoinMode_set</a> from at.o(.text.at_NetworkJoinMode_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[79]">at_NetworkJoinStatus</a> from at.o(.text.at_NetworkJoinStatus) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[54]">at_NwkSKey_get</a> from at.o(.text.at_NwkSKey_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[55]">at_NwkSKey_set</a> from at.o(.text.at_NwkSKey_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[60]">at_PublicNetwork_get</a> from at.o(.text.at_PublicNetwork_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[61]">at_PublicNetwork_set</a> from at.o(.text.at_PublicNetwork_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[7e]">at_RJTDC_get</a> from at.o(.text.at_RJTDC_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[7f]">at_RJTDC_set</a> from at.o(.text.at_RJTDC_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[80]">at_RPL_get</a> from at.o(.text.at_RPL_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[81]">at_RPL_set</a> from at.o(.text.at_RPL_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[7d]">at_Receive</a> from at.o(.text.at_Receive) referenced 2 times from command.o(.rodata.ATCommand)
 <LI><a href="#[7c]">at_ReceiveBinary</a> from at.o(.text.at_ReceiveBinary) referenced 2 times from command.o(.rodata.ATCommand)
 <LI><a href="#[66]">at_Rx1Delay_get</a> from at.o(.text.at_Rx1Delay_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[67]">at_Rx1Delay_set</a> from at.o(.text.at_Rx1Delay_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[64]">at_Rx2DataRate_get</a> from at.o(.text.at_Rx2DataRate_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[65]">at_Rx2DataRate_set</a> from at.o(.text.at_Rx2DataRate_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[68]">at_Rx2Delay_get</a> from at.o(.text.at_Rx2Delay_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[69]">at_Rx2Delay_set</a> from at.o(.text.at_Rx2Delay_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[62]">at_Rx2Frequency_get</a> from at.o(.text.at_Rx2Frequency_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[63]">at_Rx2Frequency_set</a> from at.o(.text.at_Rx2Frequency_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[9f]">at_SETCNT_set</a> from at.o(.text.at_SETCNT_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[7b]">at_Send</a> from at.o(.text.at_Send) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[7a]">at_SendBinary</a> from at.o(.text.at_SendBinary) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[88]">at_TDC_get</a> from at.o(.text.at_TDC_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[89]">at_TDC_set</a> from at.o(.text.at_TDC_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[5a]">at_TransmitPower_get</a> from at.o(.text.at_TransmitPower_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[5b]">at_TransmitPower_set</a> from at.o(.text.at_TransmitPower_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[72]">at_UplinkCounter_get</a> from at.o(.text.at_UplinkCounter_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[73]">at_UplinkCounter_set</a> from at.o(.text.at_UplinkCounter_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[83]">at_ack_get</a> from at.o(.text.at_ack_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[84]">at_ack_set</a> from at.o(.text.at_ack_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[8a]">at_application_port_get</a> from at.o(.text.at_application_port_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[8b]">at_application_port_set</a> from at.o(.text.at_application_port_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[90]">at_decrypt_get</a> from at.o(.text.at_decrypt_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[91]">at_decrypt_set</a> from at.o(.text.at_decrypt_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a7]">at_disdownlinkcheck_get</a> from at.o(.text.at_disdownlinkcheck_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a8]">at_disdownlinkcheck_set</a> from at.o(.text.at_disdownlinkcheck_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a9]">at_dismac_answer_get</a> from at.o(.text.at_dismac_answer_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[aa]">at_dismac_answer_set</a> from at.o(.text.at_dismac_answer_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a3]">at_downlink_detect_get</a> from at.o(.text.at_downlink_detect_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a4]">at_downlink_detect_set</a> from at.o(.text.at_downlink_detect_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a2]">at_getsensorvaule_set</a> from at.o(.text.at_getsensorvaule_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[85]">at_isack_get</a> from at.o(.text.at_isack_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[4a]">at_reset</a> from at.o(.text.at_reset) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[47]">at_return_error</a> from at.o(.text.at_return_error) referenced 75 times from command.o(.rodata.ATCommand)
 <LI><a href="#[47]">at_return_error</a> from at.o(.text.at_return_error) referenced from command.o(.text.printf_all_config)
 <LI><a href="#[87]">at_rssi_get</a> from at.o(.text.at_rssi_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[ab]">at_rxdata_test</a> from at.o(.text.at_rxdata_test) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a5]">at_setmaxnbtrans_get</a> from at.o(.text.at_setmaxnbtrans_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[a6]">at_setmaxnbtrans_set</a> from at.o(.text.at_setmaxnbtrans_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[86]">at_snr_get</a> from at.o(.text.at_snr_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[8c]">at_symbtimeout1LSB_get</a> from at.o(.text.at_symbtimeout1LSB_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[8d]">at_symbtimeout1LSB_set</a> from at.o(.text.at_symbtimeout1LSB_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[8e]">at_symbtimeout2LSB_get</a> from at.o(.text.at_symbtimeout2LSB_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[8f]">at_symbtimeout2LSB_set</a> from at.o(.text.at_symbtimeout2LSB_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[82]">at_version_get</a> from at.o(.text.at_version_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[9b]">at_weight_GapValue_get</a> from at.o(.text.at_weight_GapValue_get) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[9c]">at_weight_GapValue_set</a> from at.o(.text.at_weight_GapValue_set) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[9a]">at_weightreset</a> from at.o(.text.at_weightreset) referenced from command.o(.rodata.ATCommand)
 <LI><a href="#[2a]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[24]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[29e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d9]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[105]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[29f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2a0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2a1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2a2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2a3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>

<P><STRONG><a name="[2a4]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
</UL>

<P><STRONG><a name="[2a5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>

<P><STRONG><a name="[2a7]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[25e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[280]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rxdata_test
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>

<P><STRONG><a name="[155]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[154]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[e1]"></a>__0sscanf</STRONG> (Thumb, 50 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>

<P><STRONG><a name="[e3]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[e5]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
</UL>

<P><STRONG><a name="[256]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpgt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpeq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_Config
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
</UL>

<P><STRONG><a name="[178]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[167]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_get
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLux
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_Config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxConfig
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_idivmod</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[2aa]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[2ab]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2ac]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[e2]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[27]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2ad]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[e9]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[f1]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[f0]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[103]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[29a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[da]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2af]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[2a]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>__vfscanf</STRONG> (Thumb, 812 bytes, Stack size 80 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[101]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[109]"></a>ADC_Average</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ult.o(.text.ADC_Average))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Average &rArr; ADC_Dxpd
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Dxpd
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[10a]"></a>ADC_Dxpd</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, ult.o(.text.ADC_Dxpd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Dxpd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Average
</UL>

<P><STRONG><a name="[10b]"></a>AES_CMAC_Final</STRONG> (Thumb, 1092 bytes, Stack size 136 bytes, cmac.o(.text.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
</UL>

<P><STRONG><a name="[10f]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmac.o(.text.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES_CMAC_Init &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
</UL>

<P><STRONG><a name="[110]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmac.o(.text.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
</UL>

<P><STRONG><a name="[112]"></a>AES_CMAC_Update</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, cmac.o(.text.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
</UL>

<P><STRONG><a name="[113]"></a>BSP_I2C_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sht20.o(.text.BSP_I2C_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_I2C_init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[117]"></a>BSP_lidar_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lidar_lite_v3hp.o(.text.BSP_lidar_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_lidar_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[118]"></a>BSP_oil_float_DeInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, oil_float.o(.text.BSP_oil_float_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_oil_float_DeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[11a]"></a>BSP_oil_float_Init</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, oil_float.o(.text.BSP_oil_float_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_oil_float_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[11c]"></a>BSP_sensor_Init</STRONG> (Thumb, 696 bytes, Stack size 48 bytes, bsp.o(.text.BSP_sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BSP_sensor_Init &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_DeInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_DeInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_deceive
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitbusy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_lidar_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DoInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IoInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sht31_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_DeInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INPUT_IoInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI15_IoInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI14_IoInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI4_IoInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_control_IoInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[13b]"></a>BSP_sensor_Read</STRONG> (Thumb, 2116 bytes, Stack size 152 bytes, bsp.o(.text.BSP_sensor_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = BSP_sensor_Read &rArr; TSL2561_read_ch0 &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLux
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Average
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_test
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_DeInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_DeInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfsensor_read_distance
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_stop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch0
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_start_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INPUT_DeIoInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INPUT_IoInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getsensorvaule_set
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>BSP_sht31_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sht31.o(.text.BSP_sht31_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BSP_sht31_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[151]"></a>CMD_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, command.o(.text.CMD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CMD_Init &rArr; vcom_ReceiveInit &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>CMD_Process</STRONG> (Thumb, 500 bytes, Stack size 32 bytes, command.o(.text.CMD_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = CMD_Process &rArr; EEPROM_Store_Config &rArr; EEPROM_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_key
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>CalculateLux</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, tsl2561_lux.o(.text.CalculateLux))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = CalculateLux &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[158]"></a>CircularQueue_Add</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, queue.o(.text.CircularQueue_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[266]"></a>CircularQueue_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text.CircularQueue_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CircularQueue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceInit
</UL>

<P><STRONG><a name="[26a]"></a>CircularQueue_Remove</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, queue.o(.text.CircularQueue_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CircularQueue_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_TxCpltCallback
</UL>

<P><STRONG><a name="[268]"></a>CircularQueue_Sense</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, queue.o(.text.CircularQueue_Sense))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CircularQueue_Sense
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_TxCpltCallback
</UL>

<P><STRONG><a name="[15a]"></a>DBG_Init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, debug.o(.text.DBG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DBG_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStandbyMode
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStopMode
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.DMA1_Channel4_5_6_7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Channel4_5_6_7_IRQHandler &rArr; vcom_DMA_TX_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DMA_TX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>DelayMs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay.o(.text.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DelayMs &rArr; HW_RTC_DelayMs &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[292]"></a>Device_status</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp.o(.text.Device_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Device_status
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>EEPROM_Read_Config</STRONG> (Thumb, 1048 bytes, Stack size 104 bytes, lora.o(.text.EEPROM_Read_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = EEPROM_Read_Config &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[156]"></a>EEPROM_Store_Config</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, lora.o(.text.EEPROM_Store_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = EEPROM_Store_Config &rArr; EEPROM_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[157]"></a>EEPROM_Store_key</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, lora.o(.text.EEPROM_Store_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = EEPROM_Store_key &rArr; EEPROM_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>EEPROM_erase_lora_config</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash_eraseprogram.o(.text.EEPROM_erase_lora_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = EEPROM_erase_lora_config &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_FDR
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[16d]"></a>EEPROM_erase_one_address</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash_eraseprogram.o(.text.EEPROM_erase_one_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = EEPROM_erase_one_address &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_FDR
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
</UL>

<P><STRONG><a name="[168]"></a>EEPROM_program</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, flash_eraseprogram.o(.text.EEPROM_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = EEPROM_program &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Lock
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_key
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, stm32l0xx_it.o(.text.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug.o(.text.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init_uart1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_lidar_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sht31_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[171]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l0xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Erase
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_Program
</UL>

<P><STRONG><a name="[162]"></a>FLASH_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, flash_eraseprogram.o(.text.FLASH_read))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_Config
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_key
</UL>

<P><STRONG><a name="[174]"></a>Flash_Read_key</STRONG> (Thumb, 452 bytes, Stack size 80 bytes, lora.o(.text.Flash_Read_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Flash_Read_key
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>GPIO_EXTI14_IoInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gpio_exti.o(.text.GPIO_EXTI14_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_EXTI14_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD1_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[121]"></a>GPIO_EXTI15_IoInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gpio_exti.o(.text.GPIO_EXTI15_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_EXTI15_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD2_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[122]"></a>GPIO_EXTI4_IoInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, gpio_exti.o(.text.GPIO_EXTI4_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_EXTI4_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD3_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[150]"></a>GPIO_INPUT_DeIoInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gpio_exti.o(.text.GPIO_INPUT_DeIoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPIO_INPUT_DeIoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[139]"></a>GPIO_INPUT_IoInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gpio_exti.o(.text.GPIO_INPUT_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPIO_INPUT_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[136]"></a>GPIO_ULT_INPUT_DeInit</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ult.o(.text.GPIO_ULT_INPUT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_ULT_INPUT_DeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[132]"></a>GPIO_ULT_INPUT_Init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ult.o(.text.GPIO_ULT_INPUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPIO_ULT_INPUT_Init &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[137]"></a>GPIO_ULT_OUTPUT_DeInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ult.o(.text.GPIO_ULT_OUTPUT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GPIO_ULT_OUTPUT_DeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[133]"></a>GPIO_ULT_OUTPUT_Init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ult.o(.text.GPIO_ULT_OUTPUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GPIO_ULT_OUTPUT_Init &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[12a]"></a>Get_Maopi</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, weight.o(.text.Get_Maopi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_Maopi &rArr; HX711_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weightreset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weightreset
</UL>

<P><STRONG><a name="[14b]"></a>Get_Weight</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, weight.o(.text.Get_Weight))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_Weight &rArr; HX711_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
</UL>

<P><STRONG><a name="[179]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32l0xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[17a]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[17b]"></a>HAL_ADC_Init</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[17d]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[17e]"></a>HAL_ADC_Start</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
</UL>

<P><STRONG><a name="[15b]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[15d]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_DBGMCU_DisableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[295]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 712 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DMA_TX_IRQHandler
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_DMA_Init</STRONG> (Thumb, 260 bytes, Stack size 36 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32l0xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[12b]"></a>HAL_Delay</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32l0xx_hal_msp.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_Delay &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tfmini_data_receive
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfsensor_read_distance
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_deceive
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weightreset
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_all_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_FDR
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weightreset
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[16b]"></a>HAL_FLASHEx_DATAEEPROM_Erase</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l0xx_hal_flash_ex.o(.text.HAL_FLASHEx_DATAEEPROM_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Erase &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_lora_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_one_address
</UL>

<P><STRONG><a name="[16c]"></a>HAL_FLASHEx_DATAEEPROM_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(.text.HAL_FLASHEx_DATAEEPROM_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_lora_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_one_address
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
</UL>

<P><STRONG><a name="[16e]"></a>HAL_FLASHEx_DATAEEPROM_Program</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32l0xx_hal_flash_ex.o(.text.HAL_FLASHEx_DATAEEPROM_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_FLASHEx_DATAEEPROM_Program &rArr; FLASH_WaitForLastOperation &rArr; FLASH_SetErrorCode
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
</UL>

<P><STRONG><a name="[16a]"></a>HAL_FLASHEx_DATAEEPROM_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(.text.HAL_FLASHEx_DATAEEPROM_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_lora_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_one_address
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
</UL>

<P><STRONG><a name="[124]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[170]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(.text.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_IrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HW_GPIO_IrqHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_GPIO_Init</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_DeInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_DeInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoDeInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DoInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IoInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_DeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI15_IoInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI14_IoInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI4_IoInit
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_control_IoDeInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_control_IoInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[134]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_test
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HX711_Read
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_oil_float_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_control_IoInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weightreset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weightreset
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNetworkJoinedLedEvent
</UL>

<P><STRONG><a name="[172]"></a>HAL_GetTick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[116]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l0xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_lidar_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sht31_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_init
</UL>

<P><STRONG><a name="[255]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_hal_i2c.o(.text.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_stop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch0
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_start_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
</UL>

<P><STRONG><a name="[114]"></a>HAL_I2C_Init</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_lidar_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sht31_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C_init
</UL>

<P><STRONG><a name="[181]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, stm32l0xx_hal_i2c.o(.text.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch0
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
</UL>

<P><STRONG><a name="[11f]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, stm32l0xx_hal_i2c.o(.text.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_stop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch0
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_start_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[185]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 560 bytes, Stack size 56 bytes, stm32l0xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitbusy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite_init
</UL>

<P><STRONG><a name="[127]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 512 bytes, Stack size 64 bytes, stm32l0xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LidarLite_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[180]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, bsp.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[188]"></a>HAL_IWDG_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_iwdg.o(.text.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_iwdg.o(.text.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
</UL>

<P><STRONG><a name="[260]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[189]"></a>HAL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l0xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[18b]"></a>HAL_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUltraLowPower
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableFastWakeUp
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_DisablePVD
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[14f]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[14d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI15_IoInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI14_IoInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI4_IoInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[175]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI15_IoInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI14_IoInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI4_IoInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[18e]"></a>HAL_PWREx_EnableFastWakeUp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableFastWakeUp))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[18d]"></a>HAL_PWREx_EnableUltraLowPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[18c]"></a>HAL_PWR_DisablePVD</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_DisablePVD))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[202]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode
</UL>

<P><STRONG><a name="[204]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32l0xx_hal_pwr.o(.text.HAL_PWR_EnterSTOPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSTOPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[18f]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[13d]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, stm32l0xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[193]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_ClockConfig &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[192]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[190]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[191]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[194]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1364 bytes, Stack size 40 bytes, stm32l0xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(.text.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[195]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(.text.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>

<P><STRONG><a name="[197]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>

<P><STRONG><a name="[198]"></a>HAL_RTC_Init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 88 bytes, Stack size 104 bytes, stm32l0xx_hal_msp.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[19b]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[19c]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(.text.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SPI_Init</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[19e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[19f]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1450 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
</UL>

<P><STRONG><a name="[28c]"></a>HAL_TIMEx_RemapConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l0xx_hal_tim_ex.o(.text.HAL_TIMEx_RemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_Init
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[293]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
</UL>

<P><STRONG><a name="[294]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, iwdg.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[28d]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_IC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_TIM_IC_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_IC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_TIM_IC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_IC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_hal_msp.o(.text.HAL_TIM_IC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[28e]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IC_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[28f]"></a>HAL_TIM_IC_Stop_IT</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_IC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IC_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ult.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_ReadCapturedValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ReadCapturedValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[296]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_StopModeWakeUpSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 780 bytes, Stack size 48 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfmini_uart_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_UART_Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init_uart1
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_UART_MspInit</STRONG> (Thumb, 352 bytes, Stack size 96 bytes, vcom.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tfmini_data_receive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_deceive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, vcom.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_UART_Transmit</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_deceive
</UL>

<P><STRONG><a name="[1be]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace
</UL>

<P><STRONG><a name="[286]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tfmini_data_receive
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vcom.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[26b]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[147]"></a>HW_AdcReadChannel</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, stm32l0xx_hw.o(.text.HW_AdcReadChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetBatteryLevel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GetTemperatureLevel
</UL>

<P><STRONG><a name="[176]"></a>HW_GPIO_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, hw_gpio.o(.text.HW_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_OUTPUT_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ULT_INPUT_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INPUT_DeIoInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INPUT_IoInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[17f]"></a>HW_GPIO_IrqHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hw_gpio.o(.text.HW_GPIO_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_IrqHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[1c1]"></a>HW_GPIO_SetIrq</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hw_gpio.o(.text.HW_GPIO_SetIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_GPIO_SetIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSP_GetIRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[1c3]"></a>HW_GPIO_Write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hw_gpio.o(.text.HW_GPIO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>

<P><STRONG><a name="[c7]"></a>HW_GetBatteryLevel</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l0xx_hw.o(.text.HW_GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HW_GetBatteryLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[ca]"></a>HW_GetRandomSeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hw.o(.text.HW_GetRandomSeed))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[c8]"></a>HW_GetTemperatureLevel</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32l0xx_hw.o(.text.HW_GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_GetTemperatureLevel &rArr; HW_AdcReadChannel &rArr; HAL_ADC_Start &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_AdcReadChannel
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[c9]"></a>HW_GetUniqueId</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32l0xx_hw.o(.text.HW_GetUniqueId))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1c5]"></a>HW_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hw.o(.text.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = HW_Init &rArr; EEPROM_Read_Config &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_Config
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[160]"></a>HW_RTC_DelayMs</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, hw_rtc.o(.text.HW_RTC_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_RTC_DelayMs &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[264]"></a>HW_RTC_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hw_rtc.o(.text.HW_RTC_GetMinimumTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[263]"></a>HW_RTC_GetTimerContext</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_rtc.o(.text.HW_RTC_GetTimerContext))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[1cc]"></a>HW_RTC_GetTimerElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, hw_rtc.o(.text.HW_RTC_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_GetTimerElapsedTime &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[1cd]"></a>HW_RTC_GetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 32 bytes, hw_rtc.o(.text.HW_RTC_GetTimerValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[1c7]"></a>HW_RTC_Init</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, hw_rtc.o(.text.HW_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HW_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[1cf]"></a>HW_RTC_IrqHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, hw_rtc.o(.text.HW_RTC_IrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>HW_RTC_SetAlarm</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, hw_rtc.o(.text.HW_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_GetMode
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[1d3]"></a>HW_RTC_SetTimerContext</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_rtc.o(.text.HW_RTC_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_RTC_SetTimerContext &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetCalendarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIrqHandler
</UL>

<P><STRONG><a name="[1d4]"></a>HW_RTC_StopAlarm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hw_rtc.o(.text.HW_RTC_StopAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_RTC_StopAlarm &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>

<P><STRONG><a name="[1d5]"></a>HW_RTC_Tick2ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hw_rtc.o(.text.HW_RTC_Tick2ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HW_RTC_Tick2ms &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>

<P><STRONG><a name="[1d7]"></a>HW_RTC_ms2Tick</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_rtc.o(.text.HW_RTC_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_RTC_ms2Tick &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>

<P><STRONG><a name="[1d8]"></a>HW_SPI_InOut</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hw_spi.o(.text.HW_SPI_InOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadBuffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteBuffer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio3Irq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[1c6]"></a>HW_SPI_Init</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, hw_spi.o(.text.HW_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HW_SPI_Init &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[1d9]"></a>HW_SPI_IoDeInit</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, hw_spi.o(.text.HW_SPI_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[1da]"></a>HW_SPI_IoInit</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, hw_spi.o(.text.HW_SPI_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
</UL>

<P><STRONG><a name="[177]"></a>HX711_Read</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, weight.o(.text.HX711_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HX711_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[131]"></a>I2C_DoInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bh1750.o(.text.I2C_DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_DoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[12e]"></a>I2C_IoInit</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bh1750.o(.text.I2C_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[1db]"></a>IIC_Ack</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, bh1750.o(.text.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Ack &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[1dc]"></a>IIC_NAck</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, bh1750.o(.text.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_NAck &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
</UL>

<P><STRONG><a name="[1dd]"></a>IIC_ReadByte</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, bh1750.o(.text.IIC_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IIC_ReadByte &rArr; IIC_NAck &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Len
</UL>

<P><STRONG><a name="[1de]"></a>IIC_Read_Len</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bh1750.o(.text.IIC_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IIC_Read_Len &rArr; IIC_ReadByte &rArr; IIC_NAck &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_ReadByte
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
</UL>

<P><STRONG><a name="[1e0]"></a>IIC_SendByte</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, bh1750.o(.text.IIC_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_SendByte &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
</UL>

<P><STRONG><a name="[1df]"></a>IIC_Start</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, bh1750.o(.text.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Start &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
</UL>

<P><STRONG><a name="[1e2]"></a>IIC_Stop</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, bh1750.o(.text.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Stop &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Len
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
</UL>

<P><STRONG><a name="[1e1]"></a>IIC_WaitAck</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, bh1750.o(.text.IIC_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IIC_WaitAck &rArr; IIC_Stop &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Len
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bh1750_read
</UL>

<P><STRONG><a name="[13c]"></a>IWDG_Refresh</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iwdg.o(.text.IWDG_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Refresh
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[1eb]"></a>LORA_Init</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, lora.o(.text.LORA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LORA_Init &rArr; LORA_Join &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_Config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ed]"></a>LORA_Join</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lora.o(.text.LORA_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LORA_Join &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Join
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ef]"></a>LORA_JoinStatus</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, lora.o(.text.LORA_JoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LORA_JoinStatus &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionIN865GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e8]"></a>LORA_RequestClass</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lora.o(.text.LORA_RequestClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = LORA_RequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>

<P><STRONG><a name="[1e4]"></a>LORA_send</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lora.o(.text.LORA_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LORA_send &rArr; LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_running
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_ConfirmClass
</UL>

<P><STRONG><a name="[1fb]"></a>LPM_EnterLowPower</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, low_power_manager.o(.text.LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LPM_EnterLowPower &rArr; LPM_EnterStopMode &rArr; HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterSleepMode
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitOffMode
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterOffMode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>LPM_EnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(.text.LPM_EnterOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[1fc]"></a>LPM_EnterSleepMode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_hw.o(.text.LPM_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPM_EnterSleepMode &rArr; HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[1fe]"></a>LPM_EnterStopMode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l0xx_hw.o(.text.LPM_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LPM_EnterStopMode &rArr; HW_SPI_IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_control_IoDeInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[201]"></a>LPM_ExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(.text.LPM_ExitOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[1fd]"></a>LPM_ExitSleepMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, low_power_manager.o(.text.LPM_ExitSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[1ff]"></a>LPM_ExitStopMode</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32l0xx_hw.o(.text.LPM_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPM_ExitStopMode &rArr; HW_SPI_IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwr_control_IoInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_IoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
</UL>

<P><STRONG><a name="[1d2]"></a>LPM_GetMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, low_power_manager.o(.text.LPM_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
</UL>

<P><STRONG><a name="[291]"></a>LPM_SetOffMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, low_power_manager.o(.text.LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d0]"></a>LPM_SetStopMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, low_power_manager.o(.text.LPM_SetStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_TxCpltCallback
</UL>

<P><STRONG><a name="[14a]"></a>LidarLite</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, lidar_lite_v3hp.o(.text.LidarLite))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LidarLite &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[149]"></a>LidarLite_init</STRONG> (Thumb, 476 bytes, Stack size 80 bytes, lidar_lite_v3hp.o(.text.LidarLite_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LidarLite_init &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[205]"></a>LoRaMacComputeMic</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[1ec]"></a>LoRaMacInitialization</STRONG> (Thumb, 644 bytes, Stack size 56 bytes, loramac.o(.text.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LoRaMacInitialization &rArr; TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
</UL>

<P><STRONG><a name="[20a]"></a>LoRaMacJoinComputeMic</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacJoinComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = LoRaMacJoinComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[20b]"></a>LoRaMacJoinComputeSKeys</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, loramaccrypto.o(.text.LoRaMacJoinComputeSKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = LoRaMacJoinComputeSKeys &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[20c]"></a>LoRaMacJoinDecrypt</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacJoinDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LoRaMacJoinDecrypt &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1fa]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, loramac.o(.text.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTxNextPacketTimerEvent
</UL>

<P><STRONG><a name="[165]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 412 bytes, Stack size 16 bytes, loramac.o(.text.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionIN865GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_get
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_get
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_get
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_get
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_get
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_get
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_get
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_get
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_JoinStatus
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[163]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 876 bytes, Stack size 40 bytes, loramac.o(.text.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_set
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_Config
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[1ee]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 460 bytes, Stack size 56 bytes, loramac.o(.text.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
</UL>

<P><STRONG><a name="[217]"></a>LoRaMacPayloadDecrypt</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacPayloadDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[218]"></a>LoRaMacPayloadEncrypt</STRONG> (Thumb, 604 bytes, Stack size 40 bytes, loramaccrypto.o(.text.LoRaMacPayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = LoRaMacPayloadEncrypt &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[1f9]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, loramac.o(.text.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LoRaMacQueryTxPossible &rArr; RegionGetPhyParam &rArr; RegionIN865GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTxNextPacketTimerEvent
</UL>

<P><STRONG><a name="[164]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, loramac.o(.text.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionIN865Verify &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read_Config
</UL>

<P><STRONG><a name="[1c2]"></a>MSP_GetIRQn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l0xx_hal_msp.o(.text.MSP_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[20e]"></a>PrepareFrame</STRONG> (Thumb, 904 bytes, Stack size 80 bytes, loramac.o(.text.PrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = PrepareFrame &rArr; LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[22]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.RNG_LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RNG_LPUART1_IRQHandler &rArr; vcom_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RTC_IRQHandler &rArr; HW_RTC_IrqHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; TimerIrqHandler &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[219]"></a>RegionAdrNext</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, region.o(.text.RegionAdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionAdrNext &rArr; RegionIN865AdrNext
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865AdrNext
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[215]"></a>RegionAlternateDr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionAlternateDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAlternateDr
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[21e]"></a>RegionApplyCFList</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RegionApplyCFList &rArr; RegionIN865ApplyCFList &rArr; RegionIN865ChannelAdd &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[22d]"></a>RegionApplyDrOffset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(.text.RegionApplyDrOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionApplyDrOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[22f]"></a>RegionCalcBackOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionCalcBackOff &rArr; RegionIN865CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865CalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[212]"></a>RegionChanMaskSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionChanMaskSet &rArr; RegionIN865ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[240]"></a>RegionCommonCalcBackOff</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonCalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865CalcBackOff
</UL>

<P><STRONG><a name="[23f]"></a>RegionCommonChanDisable</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NewChannelReq
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ApplyCFList
</UL>

<P><STRONG><a name="[241]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, regioncommon.o(.text.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChanMaskSet
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865InitDefaults
</UL>

<P><STRONG><a name="[239]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 550 bytes, Stack size 28 bytes, regioncommon.o(.text.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>

<P><STRONG><a name="[232]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, regioncommon.o(.text.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[234]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCommonComputeSymbolTimeFsk &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[235]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[236]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetContinuousWave
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
</UL>

<P><STRONG><a name="[249]"></a>RegionCommonCountChannels</STRONG> (Thumb, 372 bytes, Stack size 28 bytes, regioncommon.o(.text.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
</UL>

<P><STRONG><a name="[238]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 222 bytes, Stack size 48 bytes, regioncommon.o(.text.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865LinkAdrReq
</UL>

<P><STRONG><a name="[246]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonParseLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonParseLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865LinkAdrReq
</UL>

<P><STRONG><a name="[24d]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonSetBandTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetBandTxDone
</UL>

<P><STRONG><a name="[23a]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, regioncommon.o(.text.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
</UL>

<P><STRONG><a name="[242]"></a>RegionCommonValueInRange</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonValueInRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelAdd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxParamSetupReq
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865Verify
</UL>

<P><STRONG><a name="[210]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(.text.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionIN865ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[227]"></a>RegionDlChannelReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionDlChannelReq &rArr; RegionIN865DlChannelReq
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[207]"></a>RegionGetPhyParam</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionGetPhyParam &rArr; RegionIN865GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[22a]"></a>RegionIN865AdrNext</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, regionin865.o(.text.RegionIN865AdrNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionIN865AdrNext
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAdrNext
</UL>

<P><STRONG><a name="[22b]"></a>RegionIN865AlternateDr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, regionin865.o(.text.RegionIN865AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[22c]"></a>RegionIN865ApplyCFList</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, regionin865.o(.text.RegionIN865ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionIN865ApplyCFList &rArr; RegionIN865ChannelAdd &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[22e]"></a>RegionIN865ApplyDrOffset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, regionin865.o(.text.RegionIN865ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[230]"></a>RegionIN865CalcBackOff</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, regionin865.o(.text.RegionIN865CalcBackOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionIN865CalcBackOff &rArr; RegionCommonCalcBackOff
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCalcBackOff
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
</UL>

<P><STRONG><a name="[231]"></a>RegionIN865ChanMaskSet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, regionin865.o(.text.RegionIN865ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionIN865ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[23e]"></a>RegionIN865ChannelAdd</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, regionin865.o(.text.RegionIN865ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionIN865ChannelAdd &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NewChannelReq
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ApplyCFList
</UL>

<P><STRONG><a name="[23b]"></a>RegionIN865ComputeRxWindowParameters</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, regionin865.o(.text.RegionIN865ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RegionIN865ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[23c]"></a>RegionIN865DlChannelReq</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, regionin865.o(.text.RegionIN865DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionIN865DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[23d]"></a>RegionIN865GetPhyParam</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, regionin865.o(.text.RegionIN865GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionIN865GetPhyParam &rArr; randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[244]"></a>RegionIN865InitDefaults</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, regionin865.o(.text.RegionIN865InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionIN865InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_freq1_get
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[245]"></a>RegionIN865LinkAdrReq</STRONG> (Thumb, 736 bytes, Stack size 80 bytes, regionin865.o(.text.RegionIN865LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RegionIN865LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[247]"></a>RegionIN865NewChannelReq</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, regionin865.o(.text.RegionIN865NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionIN865NewChannelReq &rArr; RegionIN865ChannelAdd &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[248]"></a>RegionIN865NextChannel</STRONG> (Thumb, 284 bytes, Stack size 64 bytes, regionin865.o(.text.RegionIN865NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RegionIN865NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[24a]"></a>RegionIN865RxConfig</STRONG> (Thumb, 316 bytes, Stack size 88 bytes, regionin865.o(.text.RegionIN865RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[24b]"></a>RegionIN865RxParamSetupReq</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, regionin865.o(.text.RegionIN865RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionIN865RxParamSetupReq &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[24c]"></a>RegionIN865SetBandTxDone</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, regionin865.o(.text.RegionIN865SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionIN865SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[24e]"></a>RegionIN865SetContinuousWave</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, regionin865.o(.text.RegionIN865SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RegionIN865SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[24f]"></a>RegionIN865TxConfig</STRONG> (Thumb, 312 bytes, Stack size 88 bytes, regionin865.o(.text.RegionIN865TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[253]"></a>RegionIN865TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionin865.o(.text.RegionIN865TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[250]"></a>RegionIN865Verify</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, regionin865.o(.text.RegionIN865Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionIN865Verify &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[208]"></a>RegionInitDefaults</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionInitDefaults &rArr; RegionIN865InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[206]"></a>RegionIsActive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, region.o(.text.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[224]"></a>RegionLinkAdrReq</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, region.o(.text.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = RegionLinkAdrReq &rArr; RegionIN865LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[228]"></a>RegionNewChannelReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionNewChannelReq &rArr; RegionIN865NewChannelReq &rArr; RegionIN865ChannelAdd &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[251]"></a>RegionNextChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, region.o(.text.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionNextChannel &rArr; RegionIN865NextChannel &rArr; RegionCommonUpdateBandTimeOff &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[211]"></a>RegionRxConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, region.o(.text.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[225]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionIN865RxParamSetupReq &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[222]"></a>RegionSetBandTxDone</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionSetBandTxDone &rArr; RegionIN865SetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[213]"></a>RegionSetContinuousWave</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, region.o(.text.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RegionSetContinuousWave &rArr; RegionIN865SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[252]"></a>RegionTxConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(.text.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>

<P><STRONG><a name="[226]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, region.o(.text.RegionTxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionTxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[20d]"></a>RegionVerify</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, region.o(.text.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionVerify &rArr; RegionIN865Verify &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>

<P><STRONG><a name="[254]"></a>RxChainCalibration</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, sx1276.o(.text.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[13f]"></a>SHT20_RH</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, sht20.o(.text.SHT20_RH))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SHT20_RH &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[13e]"></a>SHT20_RT</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, sht20.o(.text.SHT20_RT))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SHT20_RT &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[25b]"></a>SX1276BoardInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276.o(.text.SX1276BoardInit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
</UL>

<P><STRONG><a name="[b7]"></a>SX1276CheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1las.o(.text.SX1276CheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c6]"></a>SX1276GetRadioWakeUpTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276.o(.text.SX1276GetRadioWakeUpTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276GetRadioWakeUpTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b0]"></a>SX1276GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sx1276.o(.text.SX1276GetStatus))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b8]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, sx1276.o(.text.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276GetTimeOnAir &rArr; round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[cf]"></a>SX1276GetWakeTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx1276mb1las.o(.text.SX1276GetWakeTime))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data.BoardCallbacks)
</UL>
<P><STRONG><a name="[af]"></a>SX1276Init</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, sx1276.o(.text.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SX1276Init &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ae]"></a>SX1276IoDeInit</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, sx1276mb1las.o(.text.SX1276IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1276IoDeInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ad]"></a>SX1276IoInit</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, sx1276mb1las.o(.text.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1276IoInit &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276BoardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d0]"></a>SX1276IoIrqInit</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sx1276mb1las.o(.text.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1276IoIrqInit &rArr; HW_GPIO_SetIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_SetIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data.BoardCallbacks)
</UL>
<P><STRONG><a name="[b3]"></a>SX1276IsChannelFree</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, sx1276.o(.text.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d4]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 1468 bytes, Stack size 48 bytes, sx1276.o(.text.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = SX1276OnDio0Irq &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[d5]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SX1276OnDio1Irq &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[d6]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, sx1276.o(.text.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SX1276OnDio2Irq &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[d7]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276OnDio3Irq &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[d8]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sx1276.o(.text.SX1276OnDio4Irq))
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data.DioIrq)
</UL>
<P><STRONG><a name="[41]"></a>SX1276OnTimeoutIrq</STRONG> (Thumb, 560 bytes, Stack size 56 bytes, sx1276.o(.text.SX1276OnTimeoutIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SX1276OnTimeoutIrq &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.text.SX1276Init)
</UL>
<P><STRONG><a name="[b4]"></a>SX1276Random</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, sx1276.o(.text.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c1]"></a>SX1276Read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276Read &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c3]"></a>SX1276ReadBuffer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276ReadBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[25c]"></a>SX1276ReadFifo</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276ReadFifo &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
</UL>

<P><STRONG><a name="[bf]"></a>SX1276ReadRssi</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276ReadRssi &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b9]"></a>SX1276Send</STRONG> (Thumb, 572 bytes, Stack size 40 bytes, sx1276.o(.text.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d3]"></a>SX1276SetAntSw</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1276mb1las.o(.text.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1276SetAntSw &rArr; HW_GPIO_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data.BoardCallbacks)
</UL>
<P><STRONG><a name="[d2]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, sx1276mb1las.o(.text.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1276SetAntSwLowPower &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data.BoardCallbacks)
</UL>
<P><STRONG><a name="[b2]"></a>SX1276SetChannel</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276SetChannel &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c4]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b1]"></a>SX1276SetModem</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetPublicNetwork
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c5]"></a>SX1276SetPublicNetwork</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276SetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276SetPublicNetwork &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d1]"></a>SX1276SetRfTxPower</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sx1276mb1las.o(.text.SX1276SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SX1276SetRfTxPower &rArr; SX1276Read &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data.BoardCallbacks)
</UL>
<P><STRONG><a name="[bc]"></a>SX1276SetRx</STRONG> (Thumb, 1360 bytes, Stack size 64 bytes, sx1276.o(.text.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SX1276SetRx &rArr; TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[b5]"></a>SX1276SetRxConfig</STRONG> (Thumb, 2052 bytes, Stack size 72 bytes, sx1276.o(.text.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ba]"></a>SX1276SetSleep</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[bb]"></a>SX1276SetStby</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SX1276SetStby &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[25d]"></a>SX1276SetTx</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, sx1276.o(.text.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276SetTx &rArr; TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[b6]"></a>SX1276SetTxConfig</STRONG> (Thumb, 1284 bytes, Stack size 56 bytes, sx1276.o(.text.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[be]"></a>SX1276SetTxContinuousWave</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, sx1276.o(.text.SX1276SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SX1276SetTxContinuousWave &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetSleep &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ce]"></a>SX1276SetXO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx1276mb1las.o(.text.SX1276SetXO))
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.data.BoardCallbacks)
</UL>
<P><STRONG><a name="[bd]"></a>SX1276StartCad</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, sx1276.o(.text.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276StartCad &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c0]"></a>SX1276Write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276Write &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRfTxPower
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[c2]"></a>SX1276WriteBuffer</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sx1276.o(.text.SX1276WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1276WriteBuffer &rArr; HW_SPI_InOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_SPI_InOut
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276mb1las.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[216]"></a>Send</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, loramac.o(.text.Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[25f]"></a>SendFrameOnChannel</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, loramac.o(.text.SendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[261]"></a>SystemClock_Config</STRONG> (Thumb, 152 bytes, Stack size 96 bytes, stm32l0xx_hw.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_stm32l0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>TIM21_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.TIM21_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM21_IRQHandler &rArr; TIMER_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>TIM3_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ult.o(.text.TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_Init &rArr; HAL_TIM_Base_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[262]"></a>TIMER_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, iwdg.o(.text.TIMER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM21_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>TSL2561_config</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, sht20.o(.text.TSL2561_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TSL2561_config &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[142]"></a>TSL2561_read_ch0</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, sht20.o(.text.TSL2561_read_ch0))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = TSL2561_read_ch0 &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[143]"></a>TSL2561_read_ch1</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sht20.o(.text.TSL2561_read_ch1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TSL2561_read_ch1 &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[141]"></a>TSL2561_start_read</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sht20.o(.text.TSL2561_start_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TSL2561_start_read &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[144]"></a>TSL2561_stop</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sht20.o(.text.TSL2561_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TSL2561_stop &rArr; TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[11e]"></a>TimerGetCurrentTime</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timeserver.o(.text.TimerGetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TimerGetCurrentTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tfmini_data_receive
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_stop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch0
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_start_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxConfig
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[120]"></a>TimerGetElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timeserver.o(.text.TimerGetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TimerGetElapsedTime &rArr; HW_RTC_GetTimerValue &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Tick2ms
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tfmini_data_receive
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_stop
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch1
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch0
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_start_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RH
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1e9]"></a>TimerInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timeserver.o(.text.TimerInit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[196]"></a>TimerIrqHandler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, timeserver.o(.text.TimerIrqHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TimerIrqHandler &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerContext
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[1ea]"></a>TimerSetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timeserver.o(.text.TimerSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_ms2Tick
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnIWDGRefreshTimeoutEvent
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1f5]"></a>TimerStart</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, timeserver.o(.text.TimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TimerStart &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxContinuousWave
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnIWDGRefreshTimeoutEvent
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTxNextPacketTimerEvent
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1e7]"></a>TimerStop</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, timeserver.o(.text.TimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_StopAlarm
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetMinimumTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnTimeoutIrq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio2Irq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnDownlinkDetectTimeoutEvent
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnconfirmedUplinkChangeToConfirmedUplinkTimeoutEvent
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReJoinTimerEvent
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNetworkJoinedLedEvent
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[1c8]"></a>TraceInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, trace.o(.text.TraceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TraceInit &rArr; vcom_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
</UL>

<P><STRONG><a name="[123]"></a>TraceSend</STRONG> (Thumb, 136 bytes, Stack size 296 bytes, trace.o(.text.TraceSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Add
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Sense
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateLux
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_read_ch0
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_start_read
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TSL2561_config
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT20_RT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio1Irq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276OnDio0Irq
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_lora_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_one_address
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dismac_answer_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_disdownlinkcheck_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setmaxnbtrans_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_downlink_detect_get
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_downlink_detect_set
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_5Vtime_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD3_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD3_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD2_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD2_set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD1_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD1_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_MOD_get
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_MOD_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_decrypt_get
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_symbtimeout2LSB_get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_symbtimeout1LSB_get
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHS_get
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_application_port_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TDC_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TDC_set
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_all_config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rssi_get
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_snr_get
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_isack_get
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_get
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_printf
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version_get
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RPL_get
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RPL_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RJTDC_get
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RJTDC_set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Receive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ReceiveBinary
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_set
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DeviceClass_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_get
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_get
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_set
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_get
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_get
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_get
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_PublicNetwork_get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_get
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_get
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ADR_get
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_get
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_get
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_get
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_get
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_get
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_get
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_FDR
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DEBUG_run
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_joinmessage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_ConfirmClass
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865TxConfig
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865RxConfig
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTxNextPacketTimerEvent
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1b8]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1ba]"></a>UART_CheckIdleState</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_CheckIdleState
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b9]"></a>UART_SetConfig</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, stm32l0xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1af]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32l0xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[14e]"></a>ULT_test</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, ult.o(.text.ULT_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ULT_test &rArr; ult_test_temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ult_test_temp
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l0xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART1_IRQHandler &rArr; tfmini_uart_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfmini_uart_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>WEIGHT_DOUT_DeInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, weight.o(.text.WEIGHT_DOUT_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WEIGHT_DOUT_DeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weightreset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weightreset
</UL>

<P><STRONG><a name="[129]"></a>WEIGHT_DOUT_Init</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, weight.o(.text.WEIGHT_DOUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WEIGHT_DOUT_Init &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weightreset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weightreset
</UL>

<P><STRONG><a name="[12c]"></a>WEIGHT_SCK_DeInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, weight.o(.text.WEIGHT_SCK_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WEIGHT_SCK_DeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weightreset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weightreset
</UL>

<P><STRONG><a name="[128]"></a>WEIGHT_SCK_Init</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, weight.o(.text.WEIGHT_SCK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WEIGHT_SCK_Init &rArr; HW_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weightreset
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weightreset
</UL>

<P><STRONG><a name="[10d]"></a>aes_encrypt</STRONG> (Thumb, 948 bytes, Stack size 140 bytes, aes.o(.text.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>

<P><STRONG><a name="[111]"></a>aes_set_key</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, aes.o(.text.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aes_set_key &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>

<P><STRONG><a name="[9d]"></a>at_5Vtime_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_5Vtime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_5Vtime_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9e]"></a>at_5Vtime_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, at.o(.text.at_5Vtime_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_5Vtime_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[58]"></a>at_ADR_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_ADR_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_ADR_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[59]"></a>at_ADR_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, at.o(.text.at_ADR_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = at_ADR_set &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[4e]"></a>at_AppEUI_get</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, at.o(.text.at_AppEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = at_AppEUI_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[4f]"></a>at_AppEUI_set</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, at.o(.text.at_AppEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = at_AppEUI_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[50]"></a>at_AppKey_get</STRONG> (Thumb, 116 bytes, Stack size 112 bytes, at.o(.text.at_AppKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = at_AppKey_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[51]"></a>at_AppKey_set</STRONG> (Thumb, 136 bytes, Stack size 104 bytes, at.o(.text.at_AppKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = at_AppKey_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[56]"></a>at_AppSKey_get</STRONG> (Thumb, 116 bytes, Stack size 112 bytes, at.o(.text.at_AppSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = at_AppSKey_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[57]"></a>at_AppSKey_set</STRONG> (Thumb, 136 bytes, Stack size 104 bytes, at.o(.text.at_AppSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = at_AppSKey_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ac]"></a>at_CFG_run</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, at.o(.text.at_CFG_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = at_CFG_run &rArr; printf_all_config &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_all_config
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a0]"></a>at_CHS_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at.o(.text.at_CHS_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_CHS_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_freq1_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a1]"></a>at_CHS_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at.o(.text.at_CHS_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_CHS_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_freq1_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[49]"></a>at_DEBUG_run</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at.o(.text.at_DEBUG_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_DEBUG_run &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[5c]"></a>at_DataRate_get</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, at.o(.text.at_DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_DataRate_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[5d]"></a>at_DataRate_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, at.o(.text.at_DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_DataRate_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_tx_datarate_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[52]"></a>at_DevAddr_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at.o(.text.at_DevAddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_DevAddr_get &rArr; lora_config_devaddr_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[53]"></a>at_DevAddr_set</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, at.o(.text.at_DevAddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = at_DevAddr_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_devaddr_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[4c]"></a>at_DevEUI_get</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, at.o(.text.at_DevEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = at_DevEUI_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[4d]"></a>at_DevEUI_set</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, at.o(.text.at_DevEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = at_DevEUI_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[76]"></a>at_DeviceClass_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_DeviceClass_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_DeviceClass_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[77]"></a>at_DeviceClass_set</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, at.o(.text.at_DeviceClass_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = at_DeviceClass_set &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[74]"></a>at_DownlinkCounter_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_DownlinkCounter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_DownlinkCounter_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[75]"></a>at_DownlinkCounter_set</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, at.o(.text.at_DownlinkCounter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_DownlinkCounter_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[5e]"></a>at_DutyCycle_get</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at.o(.text.at_DutyCycle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = at_DutyCycle_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[5f]"></a>at_DutyCycle_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at.o(.text.at_DutyCycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_DutyCycle_set &rArr; lora_config_duty_cycle_set &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionIN865Verify &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_duty_cycle_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[4b]"></a>at_FDR</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, at.o(.text.at_FDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = at_FDR &rArr; EEPROM_erase_lora_config &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_lora_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_one_address
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[94]"></a>at_INTMOD1_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_INTMOD1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_INTMOD1_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[95]"></a>at_INTMOD1_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, at.o(.text.at_INTMOD1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_INTMOD1_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI14_IoInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[96]"></a>at_INTMOD2_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_INTMOD2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_INTMOD2_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[97]"></a>at_INTMOD2_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, at.o(.text.at_INTMOD2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_INTMOD2_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI15_IoInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[98]"></a>at_INTMOD3_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_INTMOD3_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_INTMOD3_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[99]"></a>at_INTMOD3_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, at.o(.text.at_INTMOD3_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_INTMOD3_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI4_IoInit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[78]"></a>at_Join</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, at.o(.text.at_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = at_Join &rArr; LORA_Join &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[6a]"></a>at_JoinAcceptDelay1_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_JoinAcceptDelay1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_JoinAcceptDelay1_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[6b]"></a>at_JoinAcceptDelay1_set</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, at.o(.text.at_JoinAcceptDelay1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_JoinAcceptDelay1_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[6c]"></a>at_JoinAcceptDelay2_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_JoinAcceptDelay2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_JoinAcceptDelay2_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[6d]"></a>at_JoinAcceptDelay2_set</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, at.o(.text.at_JoinAcceptDelay2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_JoinAcceptDelay2_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[92]"></a>at_MOD_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_MOD_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_MOD_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[93]"></a>at_MOD_set</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, at.o(.text.at_MOD_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_MOD_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[70]"></a>at_NetworkID_get</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, at.o(.text.at_NetworkID_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = at_NetworkID_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[71]"></a>at_NetworkID_set</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, at.o(.text.at_NetworkID_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 660<LI>Call Chain = at_NetworkID_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[6e]"></a>at_NetworkJoinMode_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(.text.at_NetworkJoinMode_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_NetworkJoinMode_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[6f]"></a>at_NetworkJoinMode_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at.o(.text.at_NetworkJoinMode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = at_NetworkJoinMode_set &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[79]"></a>at_NetworkJoinStatus</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, at.o(.text.at_NetworkJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_NetworkJoinStatus &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[54]"></a>at_NwkSKey_get</STRONG> (Thumb, 116 bytes, Stack size 112 bytes, at.o(.text.at_NwkSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = at_NwkSKey_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[55]"></a>at_NwkSKey_set</STRONG> (Thumb, 136 bytes, Stack size 104 bytes, at.o(.text.at_NwkSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = at_NwkSKey_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_set
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeform
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[60]"></a>at_PublicNetwork_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_PublicNetwork_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_PublicNetwork_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[61]"></a>at_PublicNetwork_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, at.o(.text.at_PublicNetwork_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = at_PublicNetwork_set &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7e]"></a>at_RJTDC_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_RJTDC_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_RJTDC_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7f]"></a>at_RJTDC_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, at.o(.text.at_RJTDC_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_RJTDC_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[80]"></a>at_RPL_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_RPL_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_RPL_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[81]"></a>at_RPL_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, at.o(.text.at_RPL_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_RPL_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7d]"></a>at_Receive</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at.o(.text.at_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_Receive &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7c]"></a>at_ReceiveBinary</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, at.o(.text.at_ReceiveBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = at_ReceiveBinary &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[66]"></a>at_Rx1Delay_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_Rx1Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_Rx1Delay_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[67]"></a>at_Rx1Delay_set</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, at.o(.text.at_Rx1Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_Rx1Delay_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[64]"></a>at_Rx2DataRate_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_Rx2DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_Rx2DataRate_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[65]"></a>at_Rx2DataRate_set</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, at.o(.text.at_Rx2DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = at_Rx2DataRate_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[68]"></a>at_Rx2Delay_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_Rx2Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_Rx2Delay_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[69]"></a>at_Rx2Delay_set</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, at.o(.text.at_Rx2Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_Rx2Delay_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[62]"></a>at_Rx2Frequency_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_Rx2Frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_Rx2Frequency_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[63]"></a>at_Rx2Frequency_set</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, at.o(.text.at_Rx2Frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_Rx2Frequency_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9f]"></a>at_SETCNT_set</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, at.o(.text.at_SETCNT_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_SETCNT_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7b]"></a>at_Send</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, at.o(.text.at_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = at_Send &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[7a]"></a>at_SendBinary</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, at.o(.text.at_SendBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = at_SendBinary &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[88]"></a>at_TDC_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_TDC_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_TDC_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[89]"></a>at_TDC_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at.o(.text.at_TDC_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_TDC_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[5a]"></a>at_TransmitPower_get</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, at.o(.text.at_TransmitPower_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_TransmitPower_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[5b]"></a>at_TransmitPower_set</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, at.o(.text.at_TransmitPower_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_TransmitPower_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[72]"></a>at_UplinkCounter_get</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_UplinkCounter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_UplinkCounter_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[73]"></a>at_UplinkCounter_set</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, at.o(.text.at_UplinkCounter_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = at_UplinkCounter_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[83]"></a>at_ack_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(.text.at_ack_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_ack_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[84]"></a>at_ack_set</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, at.o(.text.at_ack_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = at_ack_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8a]"></a>at_application_port_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at.o(.text.at_application_port_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_application_port_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_application_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8b]"></a>at_application_port_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at.o(.text.at_application_port_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_application_port_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_application_port_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[90]"></a>at_decrypt_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_decrypt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_decrypt_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[91]"></a>at_decrypt_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at.o(.text.at_decrypt_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_decrypt_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a7]"></a>at_disdownlinkcheck_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_disdownlinkcheck_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_disdownlinkcheck_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a8]"></a>at_disdownlinkcheck_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at.o(.text.at_disdownlinkcheck_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_disdownlinkcheck_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a9]"></a>at_dismac_answer_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_dismac_answer_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_dismac_answer_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[aa]"></a>at_dismac_answer_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, at.o(.text.at_dismac_answer_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_dismac_answer_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a3]"></a>at_downlink_detect_get</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, at.o(.text.at_downlink_detect_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = at_downlink_detect_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a4]"></a>at_downlink_detect_set</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, at.o(.text.at_downlink_detect_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = at_downlink_detect_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a2]"></a>at_getsensorvaule_set</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, at.o(.text.at_getsensorvaule_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = at_getsensorvaule_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[85]"></a>at_isack_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(.text.at_isack_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_isack_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_isack_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[4a]"></a>at_reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at.o(.text.at_reset))
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[47]"></a>at_return_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at.o(.text.at_return_error))
<BR>[Address Reference Count : 2]<UL><LI> command.o(.text.printf_all_config)
<LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[87]"></a>at_rssi_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at.o(.text.at_rssi_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_rssi_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_rssi_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ab]"></a>at_rxdata_test</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, at.o(.text.at_rxdata_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 684<LI>Call Chain = at_rxdata_test &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a5]"></a>at_setmaxnbtrans_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at.o(.text.at_setmaxnbtrans_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_setmaxnbtrans_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a6]"></a>at_setmaxnbtrans_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at.o(.text.at_setmaxnbtrans_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_setmaxnbtrans_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[86]"></a>at_snr_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, at.o(.text.at_snr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_snr_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_snr_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8c]"></a>at_symbtimeout1LSB_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_symbtimeout1LSB_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_symbtimeout1LSB_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8d]"></a>at_symbtimeout1LSB_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at.o(.text.at_symbtimeout1LSB_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_symbtimeout1LSB_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8e]"></a>at_symbtimeout2LSB_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, at.o(.text.at_symbtimeout2LSB_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_symbtimeout2LSB_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8f]"></a>at_symbtimeout2LSB_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at.o(.text.at_symbtimeout2LSB_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = at_symbtimeout2LSB_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[285]"></a>at_tfmini_data_receive</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, vcom.o(.text.at_tfmini_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = at_tfmini_data_receive &rArr; HAL_Delay &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfsensor_read_distance
</UL>

<P><STRONG><a name="[82]"></a>at_version_get</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, at.o(.text.at_version_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_version_get &rArr; region_printf &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9b]"></a>at_weight_GapValue_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at.o(.text.at_weight_GapValue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_weight_GapValue_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9c]"></a>at_weight_GapValue_set</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, at.o(.text.at_weight_GapValue_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 652<LI>Call Chain = at_weight_GapValue_set &rArr; tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Weight
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9a]"></a>at_weightreset</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, at.o(.text.at_weightreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = at_weightreset &rArr; HAL_Delay &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[12f]"></a>bh1750_read</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, bh1750.o(.text.bh1750_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = bh1750_read &rArr; IIC_Read_Len &rArr; IIC_ReadByte &rArr; IIC_NAck &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Len
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_WaitAck
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SendByte
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[21a]"></a>certif_DownLinkIncrement</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lora-test.o(.text.certif_DownLinkIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[21c]"></a>certif_linkCheck</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lora-test.o(.text.certif_linkCheck))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[1f8]"></a>certif_running</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora-test.o(.text.certif_running))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
</UL>

<P><STRONG><a name="[21b]"></a>certif_rx</STRONG> (Thumb, 548 bytes, Stack size 56 bytes, lora-test.o(.text.certif_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = certif_rx &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[13a]"></a>check_deceive</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, tfsensor.o(.text.check_deceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = check_deceive &rArr; uart1_init_uart1 &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoDeInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoInit
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init_uart1
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[21d]"></a>customize_freq1_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.customize_freq1_get))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHS_get
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865InitDefaults
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[277]"></a>customize_freq1_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.customize_freq1_set))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHS_set
</UL>

<P><STRONG><a name="[28b]"></a>iwdg_init</STRONG> (Thumb, 212 bytes, Stack size 96 bytes, iwdg.o(.text.iwdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = iwdg_init &rArr; HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_DeInit
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Stop_IT
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_RemapConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26f]"></a>lora_config_appeui_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_appeui_get))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_get
</UL>

<P><STRONG><a name="[271]"></a>lora_config_appeui_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora.o(.text.lora_config_appeui_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lora_config_appeui_set &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_set
</UL>

<P><STRONG><a name="[272]"></a>lora_config_appkey_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_appkey_get))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_get
</UL>

<P><STRONG><a name="[273]"></a>lora_config_appkey_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora.o(.text.lora_config_appkey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lora_config_appkey_set &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_set
</UL>

<P><STRONG><a name="[281]"></a>lora_config_application_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_application_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_application_port_get
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>lora_config_application_port_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_application_port_set))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_application_port_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[274]"></a>lora_config_appskey_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_appskey_get))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_get
</UL>

<P><STRONG><a name="[275]"></a>lora_config_appskey_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora.o(.text.lora_config_appskey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lora_config_appskey_set &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_set
</UL>

<P><STRONG><a name="[278]"></a>lora_config_devaddr_get</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lora.o(.text.lora_config_devaddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lora_config_devaddr_get &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_get
</UL>

<P><STRONG><a name="[279]"></a>lora_config_devaddr_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_devaddr_set))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_set
</UL>

<P><STRONG><a name="[27a]"></a>lora_config_deveui_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_deveui_get))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_get
</UL>

<P><STRONG><a name="[27b]"></a>lora_config_deveui_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora.o(.text.lora_config_deveui_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lora_config_deveui_set &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_set
</UL>

<P><STRONG><a name="[27c]"></a>lora_config_duty_cycle_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_duty_cycle_get))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_get
</UL>

<P><STRONG><a name="[27d]"></a>lora_config_duty_cycle_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lora.o(.text.lora_config_duty_cycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lora_config_duty_cycle_set &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionIN865Verify &rArr; RegionCommonValueInRange
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DutyCycle_set
</UL>

<P><STRONG><a name="[282]"></a>lora_config_isack_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lora.o(.text.lora_config_isack_get))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_isack_get
</UL>

<P><STRONG><a name="[27e]"></a>lora_config_nwkskey_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_nwkskey_get))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_get
</UL>

<P><STRONG><a name="[27f]"></a>lora_config_nwkskey_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora.o(.text.lora_config_nwkskey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lora_config_nwkskey_set &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_set
</UL>

<P><STRONG><a name="[1e5]"></a>lora_config_otaa_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_otaa_get))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_get
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnDownlinkDetectTimeoutEvent
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>

<P><STRONG><a name="[1f3]"></a>lora_config_otaa_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_otaa_set))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkJoinMode_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[1f6]"></a>lora_config_reqack_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_reqack_get))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[1f1]"></a>lora_config_reqack_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_reqack_set))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[283]"></a>lora_config_rssi_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_rssi_get))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rssi_get
</UL>

<P><STRONG><a name="[284]"></a>lora_config_snr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_snr_get))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_snr_get
</UL>

<P><STRONG><a name="[21f]"></a>lora_config_tx_datarate_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_tx_datarate_get))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[1f7]"></a>lora_config_tx_datarate_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora.o(.text.lora_config_tx_datarate_set))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[24]"></a>main</STRONG> (Thumb, 3732 bytes, Stack size 112 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = main &rArr; LORA_Init &rArr; LORA_Join &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Refresh
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iwdg_init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_status
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_application_port_get
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_JoinStatus
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Join
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterLowPower
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_Init
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetOffMode
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_firmware_update
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_key
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_key
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10e]"></a>memcpy1</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, utilities.o(.text.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appskey_set
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_nwkskey_set
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appkey_set
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_appeui_set
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_deveui_set
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_at_receive
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[223]"></a>memcpyr</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, utilities.o(.text.memcpyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
</UL>

<P><STRONG><a name="[10c]"></a>memset1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utilities.o(.text.memset1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>

<P><STRONG><a name="[290]"></a>new_firmware_update</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, lora.o(.text.new_firmware_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = new_firmware_update &rArr; EEPROM_erase_lora_config &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_lora_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_one_address
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[276]"></a>printf_all_config</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, command.o(.text.printf_all_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = printf_all_config &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CFG_run
</UL>

<P><STRONG><a name="[1e6]"></a>printf_joinmessage</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, loramac.o(.text.printf_joinmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = printf_joinmessage &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>

<P><STRONG><a name="[203]"></a>pwr_control_IoDeInit</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, pwr_out.o(.text.pwr_control_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pwr_control_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_EnterStopMode
</UL>

<P><STRONG><a name="[11d]"></a>pwr_control_IoInit</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, pwr_out.o(.text.pwr_control_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pwr_control_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_ExitStopMode
</UL>

<P><STRONG><a name="[243]"></a>randr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utilities.o(.text.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = randr &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865NextChannel
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIN865GetPhyParam
</UL>

<P><STRONG><a name="[287]"></a>region_printf</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora.o(.text.region_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = region_printf &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_version_get
</UL>

<P><STRONG><a name="[1f0]"></a>set_at_receive</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, at.o(.text.set_at_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_at_receive &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[209]"></a>srand1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utilities.o(.text.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[26d]"></a>tfmini_uart_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vcom.o(.text.tfmini_uart_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tfmini_uart_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>tfsensor_read_distance</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, tfsensor.o(.text.tfsensor_read_distance))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tfsensor_read_distance &rArr; at_tfmini_data_receive &rArr; HAL_Delay &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_tfmini_data_receive
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoDeInit
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_IoInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Read
</UL>

<P><STRONG><a name="[26e]"></a>tiny_sscanf</STRONG> (Thumb, 1148 bytes, Stack size 608 bytes, tiny_sscanf.o(.text.tiny_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = tiny_sscanf &rArr; __aeabi_lmul
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_rxdata_test
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_dismac_answer_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_disdownlinkcheck_set
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_setmaxnbtrans_set
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_downlink_detect_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_getsensorvaule_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SETCNT_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_5Vtime_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_weight_GapValue_set
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD3_set
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD2_set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_INTMOD1_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_MOD_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_decrypt_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_symbtimeout2LSB_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_symbtimeout1LSB_set
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_CHS_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_application_port_set
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TDC_set
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_ack_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RPL_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_RJTDC_set
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Send
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_SendBinary
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DownlinkCounter_set
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_UplinkCounter_set
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay2_set
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_JoinAcceptDelay1_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Delay_set
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx1Delay_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2DataRate_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_Rx2Frequency_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DataRate_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_TransmitPower_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_set
</UL>

<P><STRONG><a name="[28a]"></a>uart1_IoDeInit</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, vcom.o(.text.uart1_IoDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart1_IoDeInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfsensor_read_distance
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_deceive
</UL>

<P><STRONG><a name="[289]"></a>uart1_IoInit</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, vcom.o(.text.uart1_IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart1_IoInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tfsensor_read_distance
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_deceive
</UL>

<P><STRONG><a name="[288]"></a>uart1_init_uart1</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vcom.o(.text.uart1_init_uart1))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uart1_init_uart1 &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_deceive
</UL>

<P><STRONG><a name="[26c]"></a>ult_test_temp</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, ult.o(.text.ult_test_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ult_test_temp &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ULT_test
</UL>

<P><STRONG><a name="[15e]"></a>vcom_DMA_TX_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vcom.o(.text.vcom_DMA_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vcom_DMA_TX_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_6_7_IRQHandler
</UL>

<P><STRONG><a name="[229]"></a>vcom_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, vcom.o(.text.vcom_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vcom_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[265]"></a>vcom_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, vcom.o(.text.vcom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vcom_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceInit
</UL>

<P><STRONG><a name="[152]"></a>vcom_ReceiveInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vcom.o(.text.vcom_ReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vcom_ReceiveInit &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>

<P><STRONG><a name="[269]"></a>vcom_Trace</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vcom.o(.text.vcom_Trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trace_TxCpltCallback
</UL>

<P><STRONG><a name="[126]"></a>waitbusy</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, lidar_lite_v3hp.o(.text.waitbusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = waitbusy &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_sensor_Init
</UL>

<P><STRONG><a name="[1f2]"></a>weightreset</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, at.o(.text.weightreset))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = weightreset &rArr; HAL_Delay &rArr; DelayMs &rArr; HW_RTC_DelayMs &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Maopi
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_DeInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_DeInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_DOUT_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEIGHT_SCK_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RxData
</UL>

<P><STRONG><a name="[297]"></a>__0vsnprintf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b0]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2b1]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[2b2]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[267]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
</UL>

<P><STRONG><a name="[102]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2b3]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[2b4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2b5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2b6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[233]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[25a]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[237]"></a>floorf</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[258]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a0]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, stm32l0xx_hal_spi.o(.text.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[2d]"></a>UART_DMAError</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[2e]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[2f]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMATransmitCplt &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[2c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l0xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[184]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[183]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[182]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[187]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, stm32l0xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[186]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32l0xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[173]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(.text.FLASH_SetErrorCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[1c9]"></a>HW_RTC_GetCalendarValue</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, hw_rtc.o(.text.HW_RTC_GetCalendarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_DelayMs
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerValue
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_GetTimerElapsedTime
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetAlarm
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_SetTimerContext
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_RTC_Init
</UL>

<P><STRONG><a name="[44]"></a>OnIWDGRefreshTimeoutEvent</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text.OnIWDGRefreshTimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OnIWDGRefreshTimeoutEvent &rArr; TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[45]"></a>OnNetworkJoinedLedEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text.OnNetworkJoinedLedEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OnNetworkJoinedLedEvent &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[46]"></a>OnReJoinTimerEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text.OnReJoinTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OnReJoinTimerEvent &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[cb]"></a>LORA_RxData</STRONG> (Thumb, 1528 bytes, Stack size 48 bytes, main.o(.text.LORA_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LORA_RxData &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI15_IoInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI14_IoInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTI4_IoInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_erase_lora_config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_program
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_tx_datarate_set
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_application_port_set
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Store_Config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_set
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weightreset
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_set
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_at_receive
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[34]"></a>OnTxTimerEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text.OnTxTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OnTxTimerEvent &rArr; TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.OnTxTimerEvent2)
<LI> main.o(.text.LORA_RxData)
</UL>
<P><STRONG><a name="[cc]"></a>LORA_HasJoined</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, main.o(.text.LORA_HasJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LORA_HasJoined &rArr; LORA_RequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_RequestClass
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_joinmessage
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_get
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerEvent2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[30]"></a>OnTxTimerEvent2</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, main.o(.text.OnTxTimerEvent2))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OnTxTimerEvent2 &rArr; TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_reqack_get
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_HasJoined
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.LORA_HasJoined)
</UL>
<P><STRONG><a name="[cd]"></a>LORA_ConfirmClass</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.LORA_ConfirmClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = LORA_ConfirmClass &rArr; LORA_send &rArr; LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LORA_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[3f]"></a>UnconfirmedUplinkChangeToConfirmedUplinkTimeoutEvent</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(.text.UnconfirmedUplinkChangeToConfirmedUplinkTimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UnconfirmedUplinkChangeToConfirmedUplinkTimeoutEvent &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.OnTxTimerEvent2)
</UL>
<P><STRONG><a name="[40]"></a>OnDownlinkDetectTimeoutEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.OnDownlinkDetectTimeoutEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OnDownlinkDetectTimeoutEvent &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_otaa_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.OnTxTimerEvent2)
</UL>
<P><STRONG><a name="[270]"></a>changeform</STRONG> (Thumb, 140 bytes, Stack size 96 bytes, at.o(.text.changeform))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = changeform &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NetworkID_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppSKey_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_NwkSKey_set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppKey_set
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevAddr_set
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_AppEUI_set
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_DevEUI_set
</UL>

<P><STRONG><a name="[2b]"></a>CMD_GetChar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, command.o(.text.CMD_GetChar))
<BR>[Address Reference Count : 1]<UL><LI> command.o(.text.CMD_Init)
</UL>
<P><STRONG><a name="[31]"></a>MlmeConfirm</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lora.o(.text.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MlmeConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_linkCheck
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_running
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(.text.LORA_Init)
</UL>
<P><STRONG><a name="[32]"></a>McpsIndication</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lora.o(.text.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = McpsIndication &rArr; certif_rx &rArr; LoRaMacMlmeRequest &rArr; Send &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_rx
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_DownLinkIncrement
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certif_running
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora.o(.text.LORA_Init)
</UL>
<P><STRONG><a name="[33]"></a>McpsConfirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora.o(.text.McpsConfirm))
<BR>[Address Reference Count : 1]<UL><LI> lora.o(.text.LORA_Init)
</UL>
<P><STRONG><a name="[20f]"></a>ScheduleTx</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, loramac.o(.text.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCalcBackOff
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendFrameOnChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>

<P><STRONG><a name="[35]"></a>OnMacStateCheckTimerEvent</STRONG> (Thumb, 1004 bytes, Stack size 64 bytes, loramac.o(.text.OnMacStateCheckTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = OnMacStateCheckTimerEvent &rArr; OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[36]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, loramac.o(.text.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareFrame
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacStateCheckTimerEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[37]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, loramac.o(.text.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[38]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, loramac.o(.text.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[39]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(.text.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3a]"></a>OnRadioRxError</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, loramac.o(.text.OnRadioRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = OnRadioRxError &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3b]"></a>OnRadioRxDone</STRONG> (Thumb, 1844 bytes, Stack size 104 bytes, loramac.o(.text.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = OnRadioRxDone &rArr; ProcessMacCommands &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_freq1_get
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_config_tx_datarate_get
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeSKeys
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinDecrypt
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3c]"></a>OnRadioTxDone</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, loramac.o(.text.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = OnRadioTxDone &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetCurrentTime
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3d]"></a>OnRadioRxTimeout</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, loramac.o(.text.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = OnRadioRxTimeout &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerGetElapsedTime
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[3e]"></a>OnRadioTxTimeout</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, loramac.o(.text.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = OnRadioTxTimeout &rArr; RegionRxConfig &rArr; RegionIN865RxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[214]"></a>ResetMacParameters</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, loramac.o(.text.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ResetMacParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[220]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, loramac.o(.text.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PrepareRxDoneAbort &rArr; TimerSetValue &rArr; TimerStop &rArr; HW_RTC_SetAlarm &rArr; HW_RTC_GetCalendarValue &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetValue
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[221]"></a>ProcessMacCommands</STRONG> (Thumb, 1540 bytes, Stack size 96 bytes, loramac.o(.text.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ProcessMacCommands &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;customize_freq1_get
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[43]"></a>OnCertifTxNextPacketTimerEvent</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lora-test.o(.text.OnCertifTxNextPacketTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = OnCertifTxNextPacketTimerEvent &rArr; LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; SendFrameOnChannel &rArr; RegionTxConfig &rArr; RegionIN865TxConfig &rArr; TraceSend &rArr; CircularQueue_Add &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraceSend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora-test.o(.text.certif_rx)
</UL>
<P><STRONG><a name="[42]"></a>Trace_TxCpltCallback</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, trace.o(.text.Trace_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Trace_TxCpltCallback &rArr; vcom_Trace &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPM_SetStopMode
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Sense
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CircularQueue_Remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> trace.o(.text.TraceInit)
</UL>
<P><STRONG><a name="[299]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[298]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
</UL>

<P><STRONG><a name="[29c]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[48]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[29]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[107]"></a>_scanf_longlong</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[106]"></a>_scanf_real</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[108]"></a>_scanf_string</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<HR></body></html>
